---
import Header from '../../../components/Header.astro';
import Md from '../../../components/Md.astro';
import Next from '../../../components/Next.astro';
import Quiz from '../../../components/Quiz.astro';
import Sidebar from '../../../components/Sidebar.astro';
import InteractiveExercise from '../../../layouts/InteractiveExercise.astro';
import Theory from '../../../layouts/Theory.astro';
import { isLoggedIn } from '../../utils/auth.js';
import { courseIndex } from './courseIndex.js';

const user = await isLoggedIn(Astro.request);

const urlPattern = new URLPattern({pathname: '/:course/chapter/:chapter/lesson/:lesson'});
const match = urlPattern.exec(new URL(Astro.request.url));
const { course, chapter, lesson } = match.pathname.groups;

if(!user.active && parseInt(chapter) !== 0) {
  return Astro.redirect(`/${course}/subscribe#register`);
}

const currentLesson = courseIndex[course].chapters[chapter].lessons[lesson];
const nextLesson = courseIndex[course].chapters[chapter].lessons[+lesson + 1];
const nextChapter = courseIndex[course].chapters[+chapter + 1];

if(!currentLesson) {
  return Astro.redirect('/error?code="LESSON_NOT_FOUND')
}

let markdown = '';

if(currentLesson?.markdownLocation) {
  try {
    const site = new URL(Astro.request.url);
    const url = new URL(currentLesson?.markdownLocation, site.origin);
    markdown = await fetch(url.href).then(r => r.text());
  } catch(e) {
    markdown = 'Something went wrong.';
  }
}

const hasNextChapter = !!nextChapter;
const isLastLesson = !nextLesson;
let nextLink = '';
if(!isLastLesson) {
  nextLink = `/${course}/chapter/${chapter}/lesson/${parseInt(lesson) + 1}`;
}

if(isLastLesson && hasNextChapter) {
  nextLink = `/${course}/chapter/${parseInt(chapter) + 1}/lesson/0`;
}
---
{currentLesson?.kind === 'theory' && (
  <Theory 
    title={currentLesson.title} 
    hasNextChapter={hasNextChapter} 
    isLastLesson={isLastLesson} 
    next={nextLesson?.title ?? nextChapter?.title ?? ''} 
    chapter={chapter} 
    lesson={lesson}
  >
    <Header slot="header" user={user}/>
    <Sidebar 
      slot="sidebar" 
      subscribed={!!user?.active} 
      title={'Mental Gymnastics of Service Worker'} 
      chapter={chapter} 
      lesson={lesson} 
      courseIndex={courseIndex} 
      course={course}/>
    <Md slot="content" content={markdown}></Md>
    <Next 
      slot="next" 
      isLastLesson={isLastLesson} 
      hasNextChapter={hasNextChapter} 
      next={nextLesson?.title ?? nextChapter?.title ?? ''} 
      nextLink={nextLink} />
  </Theory>
)}

{currentLesson?.kind === 'quiz' && (
  <Theory 
    title={currentLesson.title} 
    hasNextChapter={hasNextChapter} 
    isLastLesson={isLastLesson} 
    next={nextLesson?.title ?? nextChapter?.title ?? ''} 
    chapter={chapter} 
    lesson={lesson}
  >
    <Header slot="header" user={user}/>
    <Sidebar 
      slot="sidebar" 
      subscribed={!!user?.active} 
      title={'Mental Gymnastics of Service Worker'} 
      chapter={chapter} 
      lesson={lesson} 
      courseIndex={courseIndex} 
      course={course}/>
    <Quiz 
      title={currentLesson.title} 
      nextLink={nextLink} 
      next={nextLesson?.title ?? nextChapter?.title ?? ''} 
      questions={currentLesson.questions} 
      slot="content"/>
  </Theory>
)}

{currentLesson?.kind === 'exercise' && (
  <InteractiveExercise 
    title={currentLesson.title} 
    next={nextLesson?.title ?? nextChapter?.title ?? ''} 
    hasNextChapter={hasNextChapter} 
    isLastLesson={isLastLesson} 
    course={course}
    chapter={chapter} 
    lesson={lesson} 
    validator={currentLesson.validatorsLocation}
  >
    <Header slot="header" user={user}/>
    <Sidebar 
      slot="sidebar" 
      subscribed={!!user?.active} 
      title={'Mental Gymnastics of Service Worker'} 
      chapter={chapter} 
      lesson={lesson} 
      courseIndex={courseIndex} 
      course={course}/>
  </InteractiveExercise>
)}
